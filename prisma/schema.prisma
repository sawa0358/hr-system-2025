generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Employee {
  id                  String            @id @default(cuid())
  employeeId          String            @unique
  employeeNumber      String            @unique
  employeeType        String
  name                String
  furigana            String?
  email               String?
  phone               String?
  department          String
  position            String
  organization        String
  team                String?
  joinDate            DateTime
  status              EmployeeStatus    @default(active)
  password            String
  role                UserRole?
  myNumber            String?
  userId              String?
  url                 String?
  address             String?
  selfIntroduction    String?
  phoneInternal       String?
  phoneMobile         String?
  birthDate           DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  showInOrgChart      Boolean           @default(true)
  parentEmployeeId    String?
  isInvisibleTop      Boolean           @default(false)
  isSuspended         Boolean           @default(false)
  retirementDate      DateTime?
  privacyDisplayName  Boolean           @default(true)
  privacyOrganization Boolean           @default(true)
  privacyDepartment   Boolean           @default(true)
  privacyPosition     Boolean           @default(true)
  privacyUrl          Boolean           @default(true)
  privacyAddress      Boolean           @default(true)
  privacyBio          Boolean           @default(true)
  privacyEmail        Boolean           @default(true)
  privacyWorkPhone    Boolean           @default(true)
  privacyExtension    Boolean           @default(true)
  privacyMobilePhone  Boolean           @default(true)
  privacyBirthDate    Boolean           @default(false)
  orgChartLabel       String?
  description         String?
  activityLogs        ActivityLog[]
  attendance          Attendance[]
  createdBoards       Board[]           @relation("BoardCreator")
  cardMembers         CardMember[]
  createdCards        Card[]            @relation("CardCreator")
  evaluations         Evaluation[]
  files               File[]
  folders             Folder[]
  leaveRequests       LeaveRequest[]
  payroll             Payroll[]
  taskMembers         TaskMember[]
  assignedTasks       Task[]            @relation("TaskAssignee")
  workspaceMembers    WorkspaceMember[]
  createdWorkspaces   Workspace[]       @relation("WorkspaceCreator")

  @@map("employees")
}

model Evaluation {
  id         String   @id @default(cuid())
  employeeId String
  period     String
  evaluator  String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("evaluations")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      String       @default("todo")
  priority    String       @default("medium")
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  employeeId  String
  members     TaskMember[]
  employee    Employee     @relation("TaskAssignee", fields: [employeeId], references: [id])

  @@map("tasks")
}

model TaskMember {
  id         String   @id @default(cuid())
  taskId     String
  employeeId String
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id])
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, employeeId])
  @@map("task_members")
}

model Attendance {
  id         String    @id @default(cuid())
  employeeId String
  date       DateTime
  clockIn    DateTime?
  clockOut   DateTime?
  breakStart DateTime?
  breakEnd   DateTime?
  status     String    @default("present")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id])

  @@map("attendance")
}

model Payroll {
  id         String   @id @default(cuid())
  employeeId String
  period     String
  amount     Float
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("payroll")
}

model File {
  id           String   @id @default(cuid())
  employeeId   String
  originalName String
  filename     String
  filePath     String?
  s3Key        String?
  mimeType     String
  fileSize     Int
  category     String
  folderName   String?
  taskId       String?
  createdAt    DateTime @default(now())
  employee     Employee @relation(fields: [employeeId], references: [id])

  @@map("files")
}

model Folder {
  id         String   @id @default(cuid())
  employeeId String
  name       String
  parentId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  parent     Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children   Folder[] @relation("FolderHierarchy")
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("folders")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  userName  String
  action    String
  module    String
  details   String
  metadata  Json?
  createdAt DateTime @default(now())
  user      Employee @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model LeaveRequest {
  id         String   @id @default(cuid())
  employeeId String
  startDate  DateTime
  endDate    DateTime
  type       String
  reason     String?
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("leave_requests")
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  boards      Board[]
  members     WorkspaceMember[]
  creator     Employee          @relation("WorkspaceCreator", fields: [createdBy], references: [id])

  @@map("workspaces")
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  workspaceId String
  employeeId  String
  role        String    @default("member")
  createdAt   DateTime  @default(now())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, employeeId])
  @@map("workspace_members")
}

model Board {
  id          String      @id @default(cuid())
  name        String
  description String?
  workspaceId String
  createdBy   String
  position    Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  lists       BoardList[]
  creator     Employee    @relation("BoardCreator", fields: [createdBy], references: [id])
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  cards       Card[]

  @@map("boards")
}

model BoardList {
  id        String   @id @default(cuid())
  title     String
  position  Int
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]

  @@map("board_lists")
}

model Card {
  id          String       @id @default(cuid())
  title       String
  description String?
  position    Int
  listId      String
  boardId     String
  createdBy   String
  attachments Json?
  labels      Json?
  dueDate     DateTime?
  priority    String       @default("medium")
  status      String       @default("todo")
  cardColor   String?
  isArchived  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     CardMember[]
  creator     Employee     @relation("CardCreator", fields: [createdBy], references: [id])
  board       Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  list        BoardList    @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@map("cards")
}

model CardMember {
  id         String   @id @default(cuid())
  cardId     String
  employeeId String
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id])
  card       Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([cardId, employeeId])
  @@map("card_members")
}

model FamilyMember {
  id           String    @id @default(cuid())
  employeeId   String
  name         String
  relationship String
  birthDate    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  address      String?
  description  String?
  myNumber     String?
  phone        String?

  @@map("family_members")
}

model UserSettings {
  id         String   @id @default(cuid())
  employeeId String
  key        String
  value      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([employeeId, key], name: "employeeId_key")
  @@map("user_settings")
}

enum UserRole {
  viewer
  general
  sub_manager
  store_manager
  manager
  hr
  admin
}

enum EmployeeStatus {
  active
  leave
  retired
  suspended
  copy
}
