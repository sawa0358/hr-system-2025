generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Employee {
  id               String         @id @default(cuid())
  employeeId       String         @unique
  employeeNumber   String         @unique
  employeeType     EmployeeType
  name             String
  email            String         @unique
  phone            String?
  department       String
  position         String
  organization     String
  team             String?
  joinDate         DateTime
  status           EmployeeStatus @default(active)
  password         String
  role             UserRole?
  myNumber         String?
  userId           String?
  url              String?
  address          String?
  selfIntroduction String?
  phoneInternal    String?
  phoneMobile      String?
  birthDate        DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  activityLogs     ActivityLog[]
  attendance       Attendance[]
  evaluations      Evaluation[]
  familyMembers    FamilyMember[]
  files            File[]
  folders          Folder[]
  payroll          Payroll[]
  tasks            Task[]
  showInOrgChart   Boolean @default(true)
  parentEmployeeId String?
  isInvisibleTop   Boolean @default(false)

  @@map("employees")
}

model FamilyMember {
  id               String   @id @default(cuid())
  employeeId       String
  name             String
  relationship     String
  phone            String?
  birthday         String?
  livingSeparately Boolean  @default(false)
  address          String?
  myNumber         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  employee         Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("family_members")
}

model Evaluation {
  id           String   @id @default(cuid())
  employeeId   String
  period       String
  evaluator    String
  status       String
  overallScore Float?
  deadline     DateTime
  scores       Json?
  comments     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  employee     Employee @relation(fields: [employeeId], references: [id])

  @@map("evaluations")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  assigneeId  String?
  dueDate     DateTime?
  priority    String
  status      String
  labels      Json?
  checklists  Json?
  members     Json?
  cardColor   String?
  comments    Int       @default(0)
  attachments Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignee    Employee? @relation(fields: [assigneeId], references: [id])

  @@map("tasks")
}

model Attendance {
  id         String    @id @default(cuid())
  employeeId String
  date       DateTime
  clockIn    DateTime?
  clockOut   DateTime?
  breakTime  Int?
  overtime   Int?
  status     String
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id])

  @@map("attendance")
}

model Payroll {
  id                 String   @id @default(cuid())
  employeeId         String
  period             String
  baseSalary         Int
  allowances         Int
  deductions         Int
  overtime           Int
  netPay             Int
  status             String
  overtimeHours      Int?
  allowanceBreakdown Json?
  deductionBreakdown Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  employee           Employee @relation(fields: [employeeId], references: [id])

  @@map("payroll")
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  employeeId   String
  category     String
  folderId     String?
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  folderName   String?
  folder       Folder?  @relation(fields: [folderId], references: [id])
  employee     Employee @relation(fields: [employeeId], references: [id])

  @@map("files")
}

model Folder {
  id         String   @id @default(cuid())
  name       String
  parentId   String?
  employeeId String
  category   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  files      File[]
  employee   Employee @relation(fields: [employeeId], references: [id])
  parent     Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children   Folder[] @relation("FolderHierarchy")

  @@map("folders")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  userName  String
  action    String
  module    String
  details   String
  metadata  Json?
  createdAt DateTime @default(now())
  user      Employee @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

enum UserRole {
  viewer
  general
  sub_manager
  store_manager
  manager
  hr
  admin
}

enum EmployeeStatus {
  active
  leave
  retired
}

enum EmployeeType {
  employee
  contractor
}
