generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                    String            @id @default(cuid())
  employeeId            String            @unique
  employeeNumber        String            @unique
  employeeType          EmployeeType
  name                  String
  furigana              String?
  email                 String?
  phone                 String?
  department            String
  position              String
  organization          String
  team                  String?
  joinDate              DateTime
  status                EmployeeStatus    @default(active)
  password              String
  role                  UserRole?
  myNumber              String?
  userId                String?
  url                   String?
  address               String?
  selfIntroduction      String?
  phoneInternal         String?
  phoneMobile           String?
  birthDate             DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  showInOrgChart        Boolean           @default(true)
  parentEmployeeId      String?
  isInvisibleTop        Boolean           @default(false)
  isSuspended           Boolean           @default(false)
  retirementDate        DateTime?
  privacyDisplayName    Boolean           @default(true)
  privacyOrganization   Boolean           @default(true)
  privacyDepartment     Boolean           @default(true)
  privacyPosition       Boolean           @default(true)
  privacyUrl            Boolean           @default(true)
  privacyAddress        Boolean           @default(true)
  privacyBio            Boolean           @default(true)
  privacyEmail          Boolean           @default(true)
  privacyWorkPhone      Boolean           @default(true)
  privacyExtension      Boolean           @default(true)
  privacyMobilePhone    Boolean           @default(true)
  privacyBirthDate      Boolean           @default(false)
  originalEmployeeId    String?
  activityLogs          ActivityLog[]
  attendance            Attendance[]
  evaluations           Evaluation[]
  familyMembers         FamilyMember[]
  files                 File[]
  folders               Folder[]
  payroll               Payroll[]
  tasks                 Task[]
  workspacesCreated     Workspace[]       @relation("WorkspaceCreator")
  workspaceMemberships  WorkspaceMember[] @relation("WorkspaceMemberships")
  boardsCreated         Board[]           @relation("BoardCreator")
  cardsCreated          Card[]            @relation("CardCreator")
  cardMemberships       CardMember[]      @relation("CardMemberships")
  cardMembersAdded      CardMember[]      @relation("CardMemberAdder")

  @@map("employees")
}

model FamilyMember {
  id               String   @id @default(cuid())
  employeeId       String
  name             String
  relationship     String
  phone            String?
  birthday         String?
  livingSeparately Boolean  @default(false)
  address          String?
  myNumber         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  employee         Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("family_members")
}

model Evaluation {
  id           String   @id @default(cuid())
  employeeId   String
  period       String
  evaluator    String
  status       String
  overallScore Float?
  deadline     DateTime
  scores       Json?
  comments     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  employee     Employee @relation(fields: [employeeId], references: [id])

  @@map("evaluations")
}

model Workspace {
  id          String              @id @default(cuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  boards      Board[]
  members     WorkspaceMember[]
  creator     Employee            @relation("WorkspaceCreator", fields: [createdBy], references: [id])

  @@map("workspaces")
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  workspaceId String
  employeeId  String
  role        String    // workspace_admin, workspace_member
  joinedAt    DateTime  @default(now())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  employee    Employee  @relation("WorkspaceMemberships", fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, employeeId])
  @@map("workspace_members")
}

model Board {
  id          String        @id @default(cuid())
  name        String
  description String?
  workspaceId String
  position    Int           @default(0)
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator     Employee      @relation("BoardCreator", fields: [createdBy], references: [id])
  lists       BoardList[]
  cards       Card[]

  @@map("boards")
}

model BoardList {
  id        String   @id @default(cuid())
  boardId   String
  title     String
  color     String?  @default("#f1f5f9")
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]

  @@map("board_lists")
}

model Card {
  id          String       @id @default(cuid())
  boardId     String
  listId      String
  title       String
  description String?
  position    Int          @default(0)
  dueDate     DateTime?
  priority    String       @default("medium")
  status      String       @default("todo")
  cardColor   String?
  labels      Json?
  checklists  Json?
  attachments Json?
  isArchived  Boolean      @default(false)
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  board       Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  list        BoardList    @relation(fields: [listId], references: [id], onDelete: Cascade)
  creator     Employee     @relation("CardCreator", fields: [createdBy], references: [id])
  members     CardMember[]

  @@map("cards")
}

model CardMember {
  id         String   @id @default(cuid())
  cardId     String
  employeeId String
  addedBy    String
  addedAt    DateTime @default(now())
  card       Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  employee   Employee @relation("CardMemberships", fields: [employeeId], references: [id], onDelete: Cascade)
  addedByUser Employee @relation("CardMemberAdder", fields: [addedBy], references: [id])

  @@unique([cardId, employeeId])
  @@map("card_members")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  assigneeId  String?
  dueDate     DateTime?
  priority    String
  status      String
  labels      Json?
  checklists  Json?
  members     Json?
  cardColor   String?
  comments    Int       @default(0)
  attachments Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignee    Employee? @relation(fields: [assigneeId], references: [id])

  @@map("tasks")
}

model Attendance {
  id         String    @id @default(cuid())
  employeeId String
  date       DateTime
  clockIn    DateTime?
  clockOut   DateTime?
  breakTime  Int?
  overtime   Int?
  status     String
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id])

  @@map("attendance")
}

model Payroll {
  id                 String   @id @default(cuid())
  employeeId         String
  period             String
  baseSalary         Int
  allowances         Int
  deductions         Int
  overtime           Int
  netPay             Int
  status             String
  overtimeHours      Int?
  allowanceBreakdown Json?
  deductionBreakdown Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  employee           Employee @relation(fields: [employeeId], references: [id])

  @@map("payroll")
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  employeeId   String
  category     String
  folderId     String?
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  folderName   String?
  employee     Employee @relation(fields: [employeeId], references: [id])
  folder       Folder?  @relation(fields: [folderId], references: [id])

  @@map("files")
}

model Folder {
  id         String   @id @default(cuid())
  name       String
  parentId   String?
  employeeId String
  category   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  files      File[]
  parent     Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children   Folder[] @relation("FolderHierarchy")
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("folders")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  userName  String
  action    String
  module    String
  details   String
  metadata  Json?
  createdAt DateTime @default(now())
  user      Employee @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

enum UserRole {
  viewer
  general
  sub_manager
  store_manager
  manager
  hr
  admin
}

enum EmployeeStatus {
  active
  leave
  retired
  suspended
  copy
}

enum EmployeeType {
  employee
  contractor
}
